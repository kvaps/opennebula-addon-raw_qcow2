#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# snap_create host:parent_image snap_id vmid ds_id

SRC=$1
SNAP_ID=$2
VMID=$3
DSID=$4
DOMAIN="one-$VMID"

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

DRIVER_PATH=$(dirname $0)

source $TMCOMMON
source ${DRIVER_PATH}/../../vmm/kvm/kvmrc

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename "${SRC}" | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/TARGET \
                    /VM/DEPLOY_ID \
                    '%m%/VM/TEMPLATE/DISK/TARGET')

DISK_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
TARGET="${XPATH_ELEMENTS[j++]}"
DEPLOY_ID="${XPATH_ELEMENTS[j++]}"
ALL_DISKS="${XPATH_ELEMENTS[j++]}"

SYSTEM_DS_PATH=$(dirname ${SRC_PATH})

SYSTEM_DS_DISK_PATH="${SYSTEM_DS_PATH}/disk.${DISK_ID}"
SYSTEM_DS_DISK_PATH_SHORT="disk.${DISK_ID}"

if [ "$CLONE" = "YES" ]; then
    DISK_PATH="${SYSTEM_DS_DISK_PATH}"
    DISK_PATH_SHORT="$(basename ${SYSTEM_DS_DISK_PATH})"
else
    DISK_PATH=$DISK_SRC
    DISK_PATH_SHORT=$DISK_PATH
fi

NEXT_SNAP_ID=$(($SNAP_ID+1))

SNAP_DIR="${DISK_PATH}.snap"
SNAP_DIR_SHORT="${DISK_PATH_SHORT}.snap"

SNAP_PATH="${SNAP_DIR}/${SNAP_ID}"
SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/${SNAP_ID}"

NEXT_SNAP_PATH="${SNAP_DIR}/${NEXT_SNAP_ID}"
NEXT_SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/${NEXT_SNAP_ID}"

ACTIVE_SNAP_ID="$(basename "$(readlink $SYSTEM_DS_DISK_PATH)")"
ACTIVE_SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/${ACTIVE_SNAP_ID}"

if [[ -z "$ACTIVE_SNAP_ID" ]]; then
    log "Error creating snapshot: Failed to readlink $SYSTEM_DS_DISK_PATH"
    exit 3
fi

CMD=$(cat <<EOT
set -ex -o pipefail

mkdir -p "${SNAP_DIR}"

if virsh -c $LIBVIRT_URI domfsfreeze $DEPLOY_ID ; then
    trap "virsh -c $LIBVIRT_URI domfsthaw $DEPLOY_ID" EXIT TERM INT HUP
fi

if [[ "$ACTIVE_SNAP_ID" != "$SNAP_ID" ]]; then
    touch "$SNAP_PATH"
    virsh snapshot-create-as --domain "$DEPLOY_ID" "${DISK_ID}-${SNAP_ID}" \
        --diskspec "$TARGET",file="$SNAP_PATH" \
        --disk-only --atomic --no-metadata || rm $SNAP_PATH
fi

# The file must be created beforehand or libvirt complains with
# "permission denied"
touch "$NEXT_SNAP_PATH"

virsh snapshot-create-as --domain "$DEPLOY_ID" "${DISK_ID}-${NEXT_SNAP_ID}" \
    --diskspec "$TARGET",file="$NEXT_SNAP_PATH" \
    --disk-only --atomic --no-metadata || rm $NEXT_SNAP_PATH


ln -sf "$NEXT_SNAP_PATH_SHORT" "$SYSTEM_DS_DISK_PATH"

EOT
)


REVERT_CMD=$(cat <<EOT
set -ex -o pipefail

# Correct SNAP_PATH
SNAP_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "//*/source/@file" | grep "$SNAP_PATH_SHORT\$")
DISK_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "/domain/devices/disk[.//@file='\${SNAP_PATH}']/source/@file")
SNAP_PARENT_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v ".//disk[source/@file='\${SNAP_PATH}']/backingStore/source/@file")

virsh blockcommit $DOMAIN --path "\${DISK_PATH}" --top "\${SNAP_PATH}" --base "\${SNAP_PARENT_PATH}" --active --wait --pivot &&
rm -f \${SNAP_PATH} || exit 2

ln -sf "${PREVIOUS_SNAP_PATH_SHORT}" "$SYSTEM_DS_DISK_PATH"

EOT
)


ssh_exec_and_log "${SRC_HOST}" "${CMD}" \
                 "Error creating snapshot ${SNAP_PATH}"


until ls "$(readlink -f $SYSTEM_DS_DISK_PATH)"; do
    sleep 1
    if [[ "$((TIMEOUT++))" -gt "20" ]]; then
        log "Error creating snapshot ${SNAP_PATH}: Snapshot operation successful, but file not found on opennebula server. Reverting..."
        # Reverting snapshot
        ssh_exec_and_log "${SRC_HOST}" "${REVERT_CMD}" \
                         "Error reverting snapshot ${SNAP_PATH}"
        exit 1
    fi
done


if [[ "$ACTIVE_SNAP_ID" != "$SNAP_ID" ]]; then
    PREVIOUS_SNAP_ID="$(basename $(qemu-img info "${SNAP_PATH}" --output=json |  python -c "import sys, json; print(json.load(sys.stdin)['backing-filename'])" ))"
    qemu-img rebase -u -b "${PREVIOUS_SNAP_ID}" "${SNAP_PATH}"
fi

# Run out of host, to avoid i/o error
PREVIOUS_SNAP_ID="$(basename $(qemu-img info "${NEXT_SNAP_PATH}" --output=json |  python -c "import sys, json; print(json.load(sys.stdin)['backing-filename'])" ))"
qemu-img rebase -u -b "${PREVIOUS_SNAP_ID}" "${NEXT_SNAP_PATH}"
