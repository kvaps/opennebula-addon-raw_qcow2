#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# snap_delete host:parent_image snap_id vmid ds_id

SRC=$1
SNAP_ID=$2
VMID=$3
DSID=$4
DOMAIN="one-$VMID"

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

DRIVER_PATH=$(dirname $0)

. $TMCOMMON

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${SRC} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/LCM_STATE)

DISK_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
LCM_STATE="${XPATH_ELEMENTS[j++]}"

SYSTEM_DS_PATH=$(dirname ${SRC_PATH})
IMAGE_DS_PATH=$(dirname ${DISK_SRC})

SYSTEM_DS_DISK_PATH_SHORT="disk.${DISK_ID}"
SYSTEM_DS_DISK_PATH="${SYSTEM_DS_PATH}/${SYSTEM_DS_DISK_PATH_SHORT}"

if [ "$CLONE" = "YES" ]; then
    DISK_PATH="${SYSTEM_DS_DISK_PATH}"
    DISK_PATH_SHORT="$(basename ${SYSTEM_DS_DISK_PATH})"
else
    DISK_PATH=$DISK_SRC
    DISK_PATH_SHORT=$DISK_PATH
fi

SNAP_DIR="${DISK_PATH}.snap"
SNAP_DIR_SHORT="disk.${DISK_ID}.snap"

#-------------------------------------------------------------------------------
# Get Snapshots information
#-------------------------------------------------------------------------------

unset SNAP_LIST

while read snapshot; do
    unset i j XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(echo "$snapshot" | $XPATH \
                    /SNAPSHOT/ID \
                    /SNAPSHOT/ACTIVE \
                    /SNAPSHOT/CHILDREN \
                    /SNAPSHOT/PARENT)

    ID="${XPATH_ELEMENTS[j++]}"
    SNAP_LIST=(${SNAP_LIST[@]} "${ID}")

    eval SNAP${ID}_ACTIVE="${XPATH_ELEMENTS[j++]}"
    eval SNAP${ID}_CHILDREN="${XPATH_ELEMENTS[j++]}"
    eval SNAP${ID}_PARENT="${XPATH_ELEMENTS[j++]}"

done < <(onevm show -x $VMID | tr '\n' ' ' | grep -Po "<SNAPSHOT>.*?</SNAPSHOT>")

LAST_SNAP="${SNAP_LIST[-1]}"
NEW_SNAP_LIST=( "${SNAP_LIST[@]/$SNAP_ID}" )
SNAP_DELETE_LIST=($(
    unset i
    for snapshot in $(seq 0 "$LAST_SNAP"); do
        if [[ ! " ${NEW_SNAP_LIST[@]} " =~ " $i " ]] &&  [[ ! " ${NEW_SNAP_LIST[@]} " =~ " $((i+1)) " ]]; then
            echo "$((i+1))"
        fi
    done
))

#-------------------------------------------------------------------------------
# Online mode
#-------------------------------------------------------------------------------

ONLINE_CMD=$(cat <<EOT
set -ex -o pipefail

for SNAP_ID in ${SNAP_DELETE_LIST[@]}; do
    SNAP_PATH="${SNAP_DIR}/\${SNAP_ID}"
    SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/\${SNAP_ID}"

    if [ ! -f "\$SNAP_PATH" ]; then
        continue # skip, because already deleted
    fi

    SNAP_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "//*/source/@file" | grep "\$SNAP_PATH_SHORT\$")
    DISK_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "/domain/devices/disk[.//@file='\${SNAP_PATH}']/source/@file")

    SNAP_BASE=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "//*[source/@file='\${SNAP_PATH}']/backingStore/source/@file")
    SNAP_BASE_SHORT=\$(echo \$SNAP_BASE | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    SNAP_BASE_ID=\$(basename \$SNAP_BASE)

    if [[ " ${NEW_SNAP_LIST[@]} " =~ " \$((SNAP_BASE_ID)) " ]]; then
        continue # skip, because new tree
    fi

    if [ "\$SNAP_PATH" == "\$DISK_PATH" ]; then
        virsh blockcommit $DOMAIN --path "\${DISK_PATH}" --top "\${SNAP_PATH}" --base "\${SNAP_BASE}" --active --wait --pivot &&
        rm -f \${SNAP_PATH}
    else
        virsh blockcommit $DOMAIN --path "\${DISK_PATH}" --top "\${SNAP_PATH}" --base "\${SNAP_BASE}" --wait &&
        rm -f \${SNAP_PATH}
    fi

    NEW_DISK_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "/domain/devices/disk[.//@file='\${SNAP_BASE}']/source/@file")
    NEW_DISK_PATH_SHORT=\$(echo \$NEW_DISK_PATH | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    ln -sf "\${NEW_DISK_PATH_SHORT}" "${SYSTEM_DS_DISK_PATH}"

done

EOT
)

#-------------------------------------------------------------------------------
# Offline mode
#-------------------------------------------------------------------------------

OFFLINE_CMD=$(cat <<EOT
set -ex -o pipefail

PREVIOUS_SNAP="${SYSTEM_DS_PATH}/\$(readlink $SYSTEM_DS_DISK_PATH)"
if [ ! -f "\$PREVIOUS_SNAP" ]; then
    PREVIOUS_SNAP="\$(readlink -f $SYSTEM_DS_DISK_PATH)"
fi

for SNAP_ID in ${SNAP_DELETE_LIST[@]}; do
    SNAP_PATH="${SNAP_DIR}/\${SNAP_ID}"
    SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/\${SNAP_ID}"

    if [ ! -f "\$SNAP_PATH" ]; then
        continue # skip, because already deleted
    fi

    SNAP_BASE=\$(qemu-img info \${SNAP_PATH} | awk -F ': ' '/^backing file:/ {print $2}')
    SNAP_BASE_SHORT=\$(echo \$SNAP_BASE | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    SNAP_BASE_ID=\$(basename \$SNAP_BASE)

    if [[ " ${NEW_SNAP_LIST[@]} " =~ " \$((SNAP_BASE_ID)) " ]]; then
        continue # skip, because new tree
    fi

    qemu-img commit "\${SNAP_PATH}" &&
    rm -f \${SNAP_PATH}

    #TODO: Fix this
    if [ ! -f \$PREVIOUS_SNAP ]; then 
        NEW_DISK_PATH="\${SNAP_BASE}"
        NEW_DISK_PATH_SHORT=\$(echo \$NEW_DISK_PATH | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
        ln -sf "\${NEW_DISK_PATH_SHORT}" "${SYSTEM_DS_DISK_PATH}"
    fi
    #TODO: qemu rebase upper image

done

EOT
)

#-------------------------------------------------------------------------------

case "$LCM_STATE" in
    59 )    ssh_exec_and_log "${SRC_HOST}" "${ONLINE_CMD}" \
                             "Error deleting snapshot ${SNAP_PATH}"
    ;;

    53|56 ) ssh_exec_and_log "${SRC_HOST}" "${OFFLINE_CMD}" \
                             "Error deleting snapshot ${SNAP_PATH}"
    ;;

    * )     log "Error deleting snapshot: Wrong STATE! $STATE"
            exit 1
    ;;
esac
    
