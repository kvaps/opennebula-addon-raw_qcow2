#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2017, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# snap_delete host:parent_image snap_id vmid ds_id

SRC=$1
SNAP_ID=$2
VMID=$3
DSID=$4
DOMAIN="one-$VMID"

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

DRIVER_PATH=$(dirname $0)

. $TMCOMMON

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${SRC} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/LCM_STATE)

DISK_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
LCM_STATE="${XPATH_ELEMENTS[j++]}"

SYSTEM_DS_PATH=$(dirname ${SRC_PATH})
IMAGE_DS_PATH=$(dirname ${DISK_SRC})

SYSTEM_DS_DISK_PATH_SHORT="disk.${DISK_ID}"
SYSTEM_DS_DISK_PATH="${SYSTEM_DS_PATH}/${SYSTEM_DS_DISK_PATH_SHORT}"

if [ "$CLONE" = "YES" ]; then
    DISK_PATH="${SYSTEM_DS_DISK_PATH}"
    DISK_PATH_SHORT="$(basename ${SYSTEM_DS_DISK_PATH})"
else
    DISK_PATH=$DISK_SRC
    DISK_PATH_SHORT=$DISK_PATH
fi

SNAP_DIR="${DISK_PATH}.snap"
SNAP_DIR_SHORT="disk.${DISK_ID}.snap"

#-------------------------------------------------------------------------------
# Get Snapshots information
#-------------------------------------------------------------------------------

unset SNAP_LIST

while read snapshot; do
    unset i j XPATH_ELEMENTS

    while IFS= read -r -d '' element; do
        XPATH_ELEMENTS[i++]="$element"
    done < <(echo "$snapshot" | $XPATH \
                    /SNAPSHOT/ID )

    ID="${XPATH_ELEMENTS[j++]}"
    SNAP_LIST=(${SNAP_LIST[@]} "${ID}")

done < <(onevm show -x $VMID | tr '\n' ' ' | grep -Po "<SNAPSHOT>.*?</SNAPSHOT>")

LAST_SNAP="${SNAP_LIST[-1]}"
NEW_SNAP_LIST=( "${SNAP_LIST[@]/$SNAP_ID}" )
FS_SNAP_LIST=( $(find $SNAP_DIR -mindepth 1 -maxdepth 1 -name '[0-9]*' -printf '%f\n' ))
ACTIVE_SNAP_ID="$(basename $(readlink -f $DISK_PATH))"


for ID in ${FS_SNAP_LIST[@]}; do
    eval SNAP${ID}_PATH="${SNAP_DIR}/${ID}"
    eval SNAP${ID}_PATH_SHORT="${SNAP_DIR_SHORT}/${ID}"

    eval SNAP${ID}_PARENT_PATH='$(qemu-img info ${SNAP'${ID}'_PATH} | awk -F '\'': '\'' '\''/^backing file:/ {print $2}'\'')'

    if [ "$?" != "0" ]; then
         eval log "Error deleting snapshot: Command execution failed \\\"qemu-img info \${SNAP'${ID}'_PATH}!\\\""
         exit 1
    fi

    eval SNAP${ID}_PARENT_PATH_SHORT='$(echo ${SNAP'${ID}'_PARENT_PATH_SHORT} | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '\''{print "${SYSTEM_DS_DISK_PATH_SHORT}" $NF}'\'')'
    
    # Get snapshot parent from image file
    eval SNAP${ID}_PARENT='${SNAP'${ID}'_PARENT:-$(basename $SNAP'${ID}'_PARENT_PATH)}'

    # Get snapshot childrens from image file
    eval PARENT="\${SNAP${ID}_PARENT}"
    eval SNAP${PARENT}_CHILDREN+=\" ${ID}\"
done

#-------------------------------------------------------------------------------
# Creating lists
#-------------------------------------------------------------------------------


for ID in ${FS_SNAP_LIST[@]}; do

    echo >> /tmp/123
    echo ID=${ID} >> /tmp/123
    eval echo PARENT_SNAP_ID="\${SNAP${ID}_PARENT}" >> /tmp/123
    eval echo CHILDREN_SNAP_LIST="\${SNAP${ID}_CHILDREN}" >> /tmp/123
    echo CHILDREN_SNAP_LIST_NUM="${#CHILDREN_SNAP[@]}" >> /tmp/123

    # get parameters

    eval PARENT_SNAP_ID="\${SNAP${ID}_PARENT}"
    eval CHILDREN_SNAP_LIST=("\${SNAP${ID}_CHILDREN}")
    CHILDREN_SNAP_LIST_NUM="${#CHILDREN_SNAP[@]}"
    

    if [[ "$CHILDREN_SNAP_LIST_NUM" -gt "1" ]]; then                    # if children_snaps_number > 1

    #-------------------------------------------------------------------------------
    # user operation:   snapshot "2" is removed right now
    # new_snap_list:    ( 0 1 5 )
    # fs_snap_map:
    #                   0 <- {1} <- [2]
    #                          \
    #                            <- [4] <- 5 (active)
    #
    # result:           snapshot 2 will be removed from the filesystem
    #-------------------------------------------------------------------------------

        for CHILDREN_SNAP_ID in ${CHILDREN_SNAP_LIST[@]}; do
            eval CHILDREN_CHILDREN_LIST=("\$SNAP${CHILDREN_SNAP_ID}_CHILDREN")
            if
                [[ ! " ${NEW_SNAP_LIST[@]} " =~ " ${CHILDREN_SNAP_ID} " ]] &&    # if children_snap is not in the new_snap_list, and
                [ -z "${CHILDREN_CHILDREN_LIST[@]}" ] &&                         # if children_snap have no childrens, and
                [[ "${CHILDREN_SNAP_ID}" != "$ACTIVE_SNAP_ID" ]]                 # if children_snap is not active_snap
            then
                SNAP_DELETE_LIST+=" ${CHILDREN_SNAP_ID}"                         # add children snapshot to delete
            fi
        done

    elif [[ "$CHILDREN_SNAP_LIST_NUM" == "1" ]]                         # if children_snaps_number = 1

        CHILDREN_SNAP_ID=(${CHILDREN_SNAP_LIST[@]})

        #-------------------------------------------------------------------------------
        # user operation:   snapshot "1" or "2" is removed right now
        # new_snap_list:    ( 0 )
        # fs_snap_map:
        #                   0 <- {1} <- [2] <- 3 (active)
        #
        # result:           snapshot "2" will be commited to snapshot "1"
        #-------------------------------------------------------------------------------
        if

             [[ ! " ${NEW_SNAP_LIST[@]} " =~ " ${ID} " ]] &&                 # if snap is not in the new_snap_list, and
             [[ "${CHILDREN_SNAP_ID}" != "${ACTIVE_SNAP_ID}" ]] &&           # if children_snap is not active_snap, and
             [[ ! " ${NEW_SNAP_LIST[@]} " =~ " ${CHILDREN_SNAP_ID} " ]]      # if children_snap is not in the new_snap_list
        then
             SNAP_COMMIT_LIST+=" ${CHILDREN_SNAP_ID}"                        # add children snapshot to commit
        fi

        #-------------------------------------------------------------------------------
        # user operation:   snapshot "0" is removed right now
        # new_snap_list:    ( )
        # fs_snap_map:
        #                   [0] <- {1} <- [2] (active)
        #
        # result:           snapshot "2" will be commited to snapshot "1"
        #-------------------------------------------------------------------------------
        if
             [[ ! " ${NEW_SNAP_LIST[@]} " =~ " ${ID} " ]] &&                 # if snap is not in the new_snap_list, and
             [[ "${CHILDREN_SNAP_ID}" == "${ACTIVE_SNAP_ID}" ]] &&           # if children_snap is active_snap, and
             [[ "${PARENT_SNAP_ID}" == "0" ]] &&                             # if parent_snap is 0 and
             [[ ! " ${NEW_SNAP_LIST[@]} " =~ " 0 " ]]                        # if parent_snap is not in the new_snap_list
        then
             SNAP_COMMIT_LIST+=" ${CHILDREN_SNAP_ID}"                        # add children snapshot to commit
        fi

    elif [[ "$CHILDREN_SNAP_LIST_NUM" == "0" ]]                         # if children_snaps_number = 0

        #-------------------------------------------------------------------------------
        # user operation:   snapshot "0" is removed right now
        # new_snap_list:    ( )
        # fs_snap_map:
        #                   [0] <- {1} (active)
        #
        # result:           snapshot "1" will be commited to snapshot "0"
        #-------------------------------------------------------------------------------
        if
             [[ "${PARENT_SNAP_ID}" == "0" ]] &&                             # if parent_snap is 0 and
             [[ ! " ${NEW_SNAP_LIST[@]} " =~ " 0 " ]] &&                     # if "0" snapshot is not in the new_snap_list, and
             [[ "${ID}" == "${ACTIVE_SNAP_ID}" ]]                            # if snap is active_snap
        then
             SNAP_COMMIT_LIST+=" ${ID}"                                      # add snapshot to commit
        fi
    fi

done

echo "SNAP_LIST=${SNAP_LIST[@]}" >> /tmp/123
echo "NEW_SNAP_LIST=${NEW_SNAP_LIST[@]}" >> /tmp/123
echo "FS_SNAP_LIST=${FS_SNAP_LIST[@]}" >> /tmp/123
echo "SNAP_COMMIT_LIST=${SNAP_COMMIT_LIST[@]}" >> /tmp/123
echo "SNAP_DELETE_LIST=${SNAP_DELETE_LIST[@]}" >> /tmp/123

#-------------------------------------------------------------------------------
# Online mode
#-------------------------------------------------------------------------------

ONLINE_CMD=$(cat <<EOT
set -ex -o pipefail

for ID in ${SNAP_COMMIT_LIST[@]} ${SNAP_DELETE_LIST[@]}; do

    SNAP_PATH="${SNAP_DIR}/\${ID}"
    SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/\${ID}"

    if [ ! -f "\$SNAP_PATH" ]; then
        continue # skip, because already deleted
    fi

    SNAP_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "//*/source/@file" | grep "\$SNAP_PATH_SHORT\$")
    DISK_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "/domain/devices/disk[.//@file='\${SNAP_PATH}']/source/@file")

    SNAP_BASE=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "//*[source/@file='\${SNAP_PATH}']/backingStore/source/@file")
    SNAP_BASE_SHORT=\$(echo \$SNAP_BASE | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    SNAP_BASE_ID=\$(basename \$SNAP_BASE)

    if [[ ! " ${SNAP_COMMIT_LIST[@]} " =~ " \${ID} " ]]; then 
        if [ "\$SNAP_PATH" == "\$DISK_PATH" ]; then
            virsh blockcommit $DOMAIN --path "\${DISK_PATH}" --top "\${SNAP_PATH}" --base "\${SNAP_BASE}" --active --wait --pivot &&
            rm -f \${SNAP_PATH}
        else
            virsh blockcommit $DOMAIN --path "\${DISK_PATH}" --top "\${SNAP_PATH}" --base "\${SNAP_BASE}" --wait &&
            rm -f \${SNAP_PATH}
        fi
    elif [[ ! " ${SNAP_DELETE_LIST[@]} " =~ " \${ID} " ]]; then
        rm -f \${SNAP_PATH}
    fi

    NEW_DISK_PATH=\$(virsh dumpxml $DOMAIN | xmlstarlet sel -t -v "/domain/devices/disk[.//@file='\${SNAP_BASE}']/source/@file")
    NEW_DISK_PATH_SHORT=\$(echo \$NEW_DISK_PATH | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    ln -sf "\${NEW_DISK_PATH_SHORT}" "${SYSTEM_DS_DISK_PATH}"

done

EOT
)

#-------------------------------------------------------------------------------
# Offline mode
#-------------------------------------------------------------------------------

OFFLINE_CMD=$(cat <<EOT
set -ex -o pipefail

PREVIOUS_SNAP="${SYSTEM_DS_PATH}/\$(readlink $SYSTEM_DS_DISK_PATH)"
if [ ! -f "\$PREVIOUS_SNAP" ]; then
    PREVIOUS_SNAP="\$(readlink -f $SYSTEM_DS_DISK_PATH)"
fi

for ID in ${SNAP_COMMIT_LIST[@]} ${SNAP_DELETE_LIST[@]}; do
    SNAP_PATH="${SNAP_DIR}/\${ID}"
    SNAP_PATH_SHORT="${SNAP_DIR_SHORT}/\${ID}"

    if [ ! -f "\$SNAP_PATH" ]; then
        continue # skip, because already deleted
    fi

    SNAP_BASE=\$(qemu-img info \${SNAP_PATH} | awk -F ': ' '/^backing file:/ {print $2}')
    SNAP_BASE_SHORT=\$(echo \$SNAP_BASE | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
    SNAP_BASE_ID=\$(basename \$SNAP_BASE)

    if [[ ! " ${SNAP_COMMIT_LIST[@]} " =~ " \${ID} " ]]; then 
        qemu-img commit "\${SNAP_PATH}" &&
        rm -f \${SNAP_PATH}
    elif [[ ! " ${SNAP_DELETE_LIST[@]} " =~ " \${ID} " ]]; then
        rm -f \${SNAP_PATH}
    fi

    #TODO: Fix this
    if [ ! -f \$PREVIOUS_SNAP ]; then 
        NEW_DISK_PATH="\${SNAP_BASE}"
        NEW_DISK_PATH_SHORT=\$(echo \$NEW_DISK_PATH | awk -F "${SYSTEM_DS_DISK_PATH_SHORT}" '{print "${SYSTEM_DS_DISK_PATH_SHORT}" \$NF}')
        ln -sf "\${NEW_DISK_PATH_SHORT}" "${SYSTEM_DS_DISK_PATH}"
    fi
    #TODO: qemu rebase upper image

done

EOT
)

#-------------------------------------------------------------------------------

case "$LCM_STATE" in
    59 )    ssh_exec_and_log "${SRC_HOST}" "${ONLINE_CMD}" \
                             "Error deleting snapshot ${SNAP_PATH}"
    ;;

    53|56 ) ssh_exec_and_log "${SRC_HOST}" "${OFFLINE_CMD}" \
                             "Error deleting snapshot ${SNAP_PATH}"
    ;;

    * )     log "Error deleting snapshot: Wrong STATE! $STATE"
            exit 1
    ;;
esac
    
